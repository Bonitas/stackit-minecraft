// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minescale

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinescaleServerClient is the client API for MinescaleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinescaleServerClient interface {
	CreateMinescaleServer(ctx context.Context, in *MinescaleRequest, opts ...grpc.CallOption) (*MinescaleReply, error)
	ListMinescaleServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MinescaleServer_ListMinescaleServerClient, error)
}

type minescaleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMinescaleServerClient(cc grpc.ClientConnInterface) MinescaleServerClient {
	return &minescaleServerClient{cc}
}

func (c *minescaleServerClient) CreateMinescaleServer(ctx context.Context, in *MinescaleRequest, opts ...grpc.CallOption) (*MinescaleReply, error) {
	out := new(MinescaleReply)
	err := c.cc.Invoke(ctx, "/minescale.MinescaleServer/CreateMinescaleServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minescaleServerClient) ListMinescaleServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MinescaleServer_ListMinescaleServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &MinescaleServer_ServiceDesc.Streams[0], "/minescale.MinescaleServer/ListMinescaleServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &minescaleServerListMinescaleServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MinescaleServer_ListMinescaleServerClient interface {
	Recv() (*MinescaleReply, error)
	grpc.ClientStream
}

type minescaleServerListMinescaleServerClient struct {
	grpc.ClientStream
}

func (x *minescaleServerListMinescaleServerClient) Recv() (*MinescaleReply, error) {
	m := new(MinescaleReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MinescaleServerServer is the server API for MinescaleServer service.
// All implementations must embed UnimplementedMinescaleServerServer
// for forward compatibility
type MinescaleServerServer interface {
	CreateMinescaleServer(context.Context, *MinescaleRequest) (*MinescaleReply, error)
	ListMinescaleServer(*emptypb.Empty, MinescaleServer_ListMinescaleServerServer) error
	mustEmbedUnimplementedMinescaleServerServer()
}

// UnimplementedMinescaleServerServer must be embedded to have forward compatible implementations.
type UnimplementedMinescaleServerServer struct {
}

func (UnimplementedMinescaleServerServer) CreateMinescaleServer(context.Context, *MinescaleRequest) (*MinescaleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMinescaleServer not implemented")
}
func (UnimplementedMinescaleServerServer) ListMinescaleServer(*emptypb.Empty, MinescaleServer_ListMinescaleServerServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMinescaleServer not implemented")
}
func (UnimplementedMinescaleServerServer) mustEmbedUnimplementedMinescaleServerServer() {}

// UnsafeMinescaleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinescaleServerServer will
// result in compilation errors.
type UnsafeMinescaleServerServer interface {
	mustEmbedUnimplementedMinescaleServerServer()
}

func RegisterMinescaleServerServer(s grpc.ServiceRegistrar, srv MinescaleServerServer) {
	s.RegisterService(&MinescaleServer_ServiceDesc, srv)
}

func _MinescaleServer_CreateMinescaleServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinescaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinescaleServerServer).CreateMinescaleServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minescale.MinescaleServer/CreateMinescaleServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinescaleServerServer).CreateMinescaleServer(ctx, req.(*MinescaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinescaleServer_ListMinescaleServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MinescaleServerServer).ListMinescaleServer(m, &minescaleServerListMinescaleServerServer{stream})
}

type MinescaleServer_ListMinescaleServerServer interface {
	Send(*MinescaleReply) error
	grpc.ServerStream
}

type minescaleServerListMinescaleServerServer struct {
	grpc.ServerStream
}

func (x *minescaleServerListMinescaleServerServer) Send(m *MinescaleReply) error {
	return x.ServerStream.SendMsg(m)
}

// MinescaleServer_ServiceDesc is the grpc.ServiceDesc for MinescaleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinescaleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minescale.MinescaleServer",
	HandlerType: (*MinescaleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMinescaleServer",
			Handler:    _MinescaleServer_CreateMinescaleServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMinescaleServer",
			Handler:       _MinescaleServer_ListMinescaleServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto-files/minescale/minescale.proto",
}
